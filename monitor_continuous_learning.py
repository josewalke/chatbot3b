#!/usr/bin/env python3
"""
Monitor del Sistema de Aprendizaje Continuo
Monitorea el progreso del aprendizaje en tiempo real
"""
import requests
import time
import json
from datetime import datetime, timedelta
import os

def clear_screen():
    """Limpiar pantalla"""
    os.system('cls' if os.name == 'nt' else 'clear')

def get_learning_stats():
    """Obtener estad√≠sticas del aprendizaje"""
    try:
        response = requests.get("http://localhost:8000/continuous-learning/stats")
        if response.status_code == 200:
            return response.json()
        else:
            return None
    except Exception as e:
        print(f"‚ùå Error obteniendo estad√≠sticas: {e}")
        return None

def format_duration(seconds):
    """Formatear duraci√≥n en formato legible"""
    if seconds < 60:
        return f"{seconds:.1f}s"
    elif seconds < 3600:
        minutes = seconds / 60
        return f"{minutes:.1f}m"
    else:
        hours = seconds / 3600
        return f"{hours:.1f}h"

def format_time_ago(timestamp_str):
    """Formatear tiempo transcurrido"""
    if not timestamp_str:
        return "Nunca"
    
    try:
        timestamp = datetime.fromisoformat(timestamp_str.replace('Z', '+00:00'))
        now = datetime.now(timestamp.tzinfo)
        diff = now - timestamp
        
        if diff.total_seconds() < 60:
            return f"{int(diff.total_seconds())}s"
        elif diff.total_seconds() < 3600:
            minutes = int(diff.total_seconds() / 60)
            return f"{minutes}m"
        else:
            hours = int(diff.total_seconds() / 3600)
            return f"{hours}h"
    except:
        return "Desconocido"

def display_stats(stats, start_time):
    """Mostrar estad√≠sticas formateadas"""
    clear_screen()
    
    print("üéØ **Monitor del Sistema de Aprendizaje Continuo**")
    print("=" * 60)
    print(f"üïí Iniciado: {start_time.strftime('%H:%M:%S')}")
    print(f"‚è∞ Actualizado: {datetime.now().strftime('%H:%M:%S')}")
    print("=" * 60)
    
    if not stats:
        print("‚ùå No se pueden obtener estad√≠sticas")
        return
    
    learning_stats = stats['continuous_learning_stats']
    config = stats['config']
    
    # Estado del sistema
    status = "‚úÖ EJECUT√ÅNDOSE" if stats['is_running'] else "‚è∏Ô∏è DETENIDO"
    print(f"üîÑ Estado del Sistema: {status}")
    print()
    
    # Estad√≠sticas principales
    print("üìä **Estad√≠sticas Principales**")
    print(f"   üìà Sesiones totales: {learning_stats['total_sessions']}")
    print(f"   üìö Palabras aprendidas: {learning_stats['total_words_learned']:,}")
    print(f"   üí¨ Expresiones aprendidas: {learning_stats['total_expressions_learned']:,}")
    print(f"   ‚è±Ô∏è Duraci√≥n promedio: {format_duration(learning_stats['avg_duration_seconds'])}")
    print(f"   ‚ùå Sesiones con error: {learning_stats['error_sessions']}")
    print()
    
    # Informaci√≥n de tiempo
    print("‚è∞ **Informaci√≥n de Tiempo**")
    if learning_stats['last_training']:
        last_training = format_time_ago(learning_stats['last_training'])
        print(f"   üïí √öltima sesi√≥n: {last_training} atr√°s")
    
    if learning_stats['next_training_in_minutes']:
        next_training = learning_stats['next_training_in_minutes']
        print(f"   ‚è∞ Pr√≥xima sesi√≥n: en {next_training} minutos")
    
    print(f"   ‚è±Ô∏è Intervalo configurado: {config['training_interval_minutes']} minutos")
    print()
    
    # Configuraci√≥n
    print("‚öôÔ∏è **Configuraci√≥n Activa**")
    print(f"   üìÑ Archivos de texto: {'‚úÖ' if config['enable_text_files'] else '‚ùå'}")
    print(f"   üåê APIs p√∫blicas: {'‚úÖ' if config['enable_api_learning'] else '‚ùå'}")
    print(f"   ü§ñ Datos sint√©ticos: {'‚úÖ' if config['enable_synthetic_data'] else '‚ùå'}")
    print(f"   üìö Corpus espa√±ol: {'‚úÖ' if config['enable_spanish_corpus'] else '‚ùå'}")
    print()
    
    # Progreso del d√≠a
    print("üìÖ **Progreso del D√≠a**")
    today = datetime.now().date()
    today_words = learning_stats.get('today_words', 0)
    today_expressions = learning_stats.get('today_expressions', 0)
    print(f"   üìö Palabras hoy: {today_words}")
    print(f"   üí¨ Expresiones hoy: {today_expressions}")
    print(f"   üìà Total aprendido hoy: {today_words + today_expressions}")
    print()
    
    # Rendimiento
    print("‚ö° **Rendimiento**")
    if learning_stats['total_sessions'] > 0:
        success_rate = ((learning_stats['total_sessions'] - learning_stats['error_sessions']) / learning_stats['total_sessions']) * 100
        print(f"   üéØ Tasa de √©xito: {success_rate:.1f}%")
    
    if learning_stats['avg_duration_seconds'] > 0:
        words_per_minute = (learning_stats['total_words_learned'] / learning_stats['total_sessions']) / (learning_stats['avg_duration_seconds'] / 60)
        print(f"   üìö Palabras/minuto: {words_per_minute:.1f}")
    
    print()
    print("üí° Presiona Ctrl+C para detener el monitor")
    print("=" * 60)

def monitor_learning():
    """Monitorear el aprendizaje continuo"""
    start_time = datetime.now()
    
    print("üéØ **Monitor del Sistema de Aprendizaje Continuo**")
    print("=" * 60)
    print("Iniciando monitor...")
    print("Presiona Ctrl+C para detener")
    print("=" * 60)
    
    try:
        while True:
            stats = get_learning_stats()
            display_stats(stats, start_time)
            time.sleep(10)  # Actualizar cada 10 segundos
            
    except KeyboardInterrupt:
        print("\nüõë Monitor detenido por el usuario")
        print("üëã ¬°Hasta luego!")

def show_help():
    """Mostrar ayuda"""
    print("""
üéØ **Monitor del Sistema de Aprendizaje Continuo**

Uso:
  python monitor_continuous_learning.py

Funciones:
  ‚Ä¢ Monitoreo en tiempo real del aprendizaje
  ‚Ä¢ Estad√≠sticas detalladas del sistema
  ‚Ä¢ Informaci√≥n de rendimiento
  ‚Ä¢ Estado de configuraci√≥n

Requisitos:
  ‚Ä¢ Servidor optimizado ejecut√°ndose
  ‚Ä¢ Aprendizaje continuo iniciado

Comandos √∫tiles:
  ‚Ä¢ Iniciar servidor: python backend/start_optimized.py
  ‚Ä¢ Iniciar aprendizaje: python start_continuous_learning.py
  ‚Ä¢ Ver estad√≠sticas: curl http://localhost:8000/continuous-learning/stats
""")

def main():
    """Funci√≥n principal"""
    # Verificar argumentos
    import sys
    if len(sys.argv) > 1 and sys.argv[1] in ['-h', '--help', 'help']:
        show_help()
        return
    
    # Verificar que el servidor est√© corriendo
    try:
        health_response = requests.get("http://localhost:8000/health")
        if health_response.status_code != 200:
            print("‚ùå El servidor no est√° corriendo")
            print("üí° Ejecuta: python backend/start_optimized.py")
            return
    except Exception as e:
        print(f"‚ùå No se puede conectar al servidor: {e}")
        print("üí° Ejecuta: python backend/start_optimized.py")
        return
    
    # Iniciar monitor
    monitor_learning()

if __name__ == "__main__":
    main() 