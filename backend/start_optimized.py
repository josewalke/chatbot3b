#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Inicio Optimizado para Chatbot Inteligente
Versi√≥n eficiente en recursos
"""

import os
import sys
import logging
import subprocess
import time
from pathlib import Path

# Configurar logging b√°sico
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def check_python_version():
    """Verificar versi√≥n de Python"""
    if sys.version_info < (3, 8):
        logger.error("‚ùå Se requiere Python 3.8 o superior")
        return False
    logger.info(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} detectado")
    return True

def check_dependencies():
    """Verificar dependencias b√°sicas"""
    required_packages = ['fastapi', 'uvicorn']
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
            logger.info(f"‚úÖ {package} instalado")
        except ImportError:
            missing_packages.append(package)
            logger.warning(f"‚ö†Ô∏è {package} no encontrado")
    
    if missing_packages:
        logger.error(f"‚ùå Paquetes faltantes: {', '.join(missing_packages)}")
        logger.info("üí° Ejecuta: pip install -r requirements_optimized.txt")
        return False
    
    return True

def create_env_file():
    """Crear archivo .env optimizado si no existe"""
    env_file = Path(".env")
    if not env_file.exists():
        logger.info("üìù Creando archivo .env optimizado...")
        
        env_content = """# Configuraci√≥n Optimizada del Chatbot
# Modo optimizado (ahorra recursos)
DEBUG=False
WORKERS=1
CACHE_MAX_SIZE=1000
LOG_LEVEL=INFO

# Base de datos SQLite (ligera)
DATABASE_URL=sqlite:///chatbot_optimized.db

# Configuraciones opcionales (descomentar solo si se necesita)
# USE_OPENAI=False
# OPENAI_API_KEY=tu-api-key-aqui

# USE_STRIPE=False
# STRIPE_SECRET_KEY=tu-stripe-key-aqui

# USE_TELEGRAM=False
# TELEGRAM_BOT_TOKEN=tu-telegram-token-aqui

# USE_FACEBOOK=False
# FACEBOOK_PAGE_ACCESS_TOKEN=tu-facebook-token-aqui

# Configuraci√≥n de seguridad
SECRET_KEY=chatbot-optimized-secret-key-2024
"""
        
        with open(env_file, 'w', encoding='utf-8') as f:
            f.write(env_content)
        
        logger.info("‚úÖ Archivo .env creado")
    else:
        logger.info("‚úÖ Archivo .env encontrado")

def optimize_system():
    """Optimizar configuraci√≥n del sistema"""
    logger.info("üîß Aplicando optimizaciones...")
    
    # Configurar variables de entorno para optimizaci√≥n
    os.environ.setdefault('PYTHONOPTIMIZE', '1')  # Optimizaciones de Python
    os.environ.setdefault('PYTHONDONTWRITEBYTECODE', '1')  # No generar .pyc
    os.environ.setdefault('PYTHONUNBUFFERED', '1')  # Salida sin buffer
    
    # Configuraciones espec√≠ficas del chatbot
    os.environ.setdefault('WORKERS', '1')
    os.environ.setdefault('CACHE_MAX_SIZE', '1000')
    os.environ.setdefault('LOG_LEVEL', 'INFO')
    
    logger.info("‚úÖ Optimizaciones aplicadas")

def start_server():
    """Iniciar servidor optimizado con aprendizaje continuo"""
    logger.info("üöÄ Iniciando servidor optimizado...")
    
    try:
        # Configurar servidor uvicorn optimizado
        cmd = [
            sys.executable, "-m", "uvicorn",
            "optimized_server:app",
            "--host", "0.0.0.0",
            "--port", "8000",
            "--workers", "1",
            "--loop", "asyncio",
            "--log-level", "info",
            "--access-log",
            "--no-use-colors"
        ]
        
        logger.info("‚úÖ Servidor iniciado en http://localhost:8000")
        logger.info("üìä Panel de estado: http://localhost:8000/health")
        logger.info("ü§ñ Chat: http://localhost:8000/chat/send")
        logger.info("üìà Estad√≠sticas: http://localhost:8000/stats")
        logger.info("üîÑ Aprendizaje continuo: http://localhost:8000/continuous-learning/stats")
        
        # Ejecutar servidor
        subprocess.run(cmd, check=True)
        
    except KeyboardInterrupt:
        logger.info("üõë Servidor detenido por el usuario")
    except Exception as e:
        logger.error(f"‚ùå Error iniciando servidor: {e}")
        return False
    
    return True

def show_optimization_info():
    """Mostrar informaci√≥n de optimizaci√≥n"""
    logger.info("""
üîß CHATBOT INTELIGENTE OPTIMIZADO
================================

üíæ Optimizaciones de Memoria:
   ‚Ä¢ Cache limitado a 1000 elementos
   ‚Ä¢ Un solo worker para ahorrar RAM
   ‚Ä¢ Base de datos SQLite ligera
   ‚Ä¢ Logging optimizado

‚ö° Optimizaciones de CPU:
   ‚Ä¢ LRU cache para funciones frecuentes
   ‚Ä¢ B√∫squeda directa de patrones
   ‚Ä¢ Procesamiento as√≠ncrono
   ‚Ä¢ √çndices en base de datos

üåê Optimizaciones de Red:
   ‚Ä¢ Respuestas JSON compactas
   ‚Ä¢ Timeouts configurados
   ‚Ä¢ CORS optimizado
   ‚Ä¢ Headers m√≠nimos

üìä Uso de Recursos Estimado:
   ‚Ä¢ Memoria: ~50-100 MB
   ‚Ä¢ CPU: ~5-15%
   ‚Ä¢ Disco: ~10-50 MB
   ‚Ä¢ Red: M√≠nimo

üöÄ Endpoints Disponibles:
   ‚Ä¢ GET  / - P√°gina principal
   ‚Ä¢ GET  /health - Estado del servidor
   ‚Ä¢ POST /chat/send - Enviar mensaje
   ‚Ä¢ GET  /appointments/available-slots - Horarios
   ‚Ä¢ POST /appointments/create - Crear cita
   ‚Ä¢ GET  /sales/products - Productos
   ‚Ä¢ POST /support/query - Soporte
   ‚Ä¢ GET  /stats - Estad√≠sticas

üí° Para habilitar caracter√≠sticas adicionales:
   ‚Ä¢ Edita el archivo .env
   ‚Ä¢ Descomenta las configuraciones que necesites
   ‚Ä¢ Instala las dependencias correspondientes
""")

def main():
    """Funci√≥n principal"""
    logger.info("ü§ñ Iniciando Chatbot Inteligente Optimizado...")
    
    # Verificaciones previas
    if not check_python_version():
        sys.exit(1)
    
    if not check_dependencies():
        logger.error("‚ùå No se pueden verificar las dependencias")
        logger.info("üí° Instala las dependencias: pip install -r requirements_optimized.txt")
        sys.exit(1)
    
    # Configurar entorno
    create_env_file()
    optimize_system()
    
    # Mostrar informaci√≥n
    show_optimization_info()
    
    # Iniciar servidor
    if not start_server():
        sys.exit(1)

if __name__ == "__main__":
    main() 