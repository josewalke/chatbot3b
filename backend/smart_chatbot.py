from flask import Flask, request, jsonify
from flask_cors import CORS
import json
import re
from difflib import SequenceMatcher

# Crear la aplicaci√≥n Flask
app = Flask(__name__)
CORS(app)

# Datos de prueba
SERVICES = [
    {"id": 1, "name": "Consulta General", "duration": 30, "price": 50},
    {"id": 2, "name": "Consulta Especializada", "duration": 60, "price": 100},
    {"id": 3, "name": "Seguimiento", "duration": 20, "price": 30}
]

PRODUCTS = [
    {"id": 1, "name": "Producto A", "price": 25.99, "description": "Descripci√≥n del producto A"},
    {"id": 2, "name": "Producto B", "price": 49.99, "description": "Descripci√≥n del producto B"},
    {"id": 3, "name": "Producto C", "price": 99.99, "description": "Descripci√≥n del producto C"}
]

# Patrones de intenci√≥n m√°s inteligentes
INTENT_PATTERNS = {
    "greeting": [
        r"\b(hola|buenos|buenas|saludos|hey|hi|hello)\b",
        r"\b(como estas|qu√© tal|que tal)\b",
        r"\b(buenos d√≠as|buenas tardes|buenas noches)\b"
    ],
    "appointment": [
        r"\b(cita|agendar|reservar|appointment|consulta)\b",
        r"\b(quiero|necesito|busco|me gustar√≠a|me gustaria)\s+(una\s+)?(cita|consulta)\b",
        r"\b(agenda|reserva|programa)\s+(una\s+)?(cita|consulta)\b",
        r"\b(consulta general|consulta especializada|seguimiento)\b"
    ],
    "products": [
        r"\b(producto|productos|cat√°logo|catalogo|merchandise)\b",
        r"\b(quiero|necesito|busco|me gustar√≠a|me gustaria)\s+(ver\s+)?(productos?|cat√°logo|catalogo)\b",
        r"\b(mu√©strame|muestrame|dame|d√©jame|dejame)\s+(los\s+)?(productos?|cat√°logo|catalogo)\b",
        r"\b(qu√©|que)\s+(productos?|tienes|ofreces)\b",
        r"\b(informaci√≥n|info)\s+(de\s+)?(productos?)\b"
    ],
    "product_info": [
        r"\b(hablame|cu√©ntame|dime|informaci√≥n|info)\s+(del\s+)?(producto\s+[abc])\b",
        r"\b(qu√©|que)\s+(es|sabe|tiene)\s+(el\s+)?(producto\s+[abc])\b",
        r"\b(caracter√≠sticas|especificaciones|detalles)\s+(del\s+)?(producto\s+[abc])\b",
        r"\b(producto\s+[abc])\s+(qu√©|que)\s+(es|hace|ofrece)\b"
    ],
    "purchase": [
        r"\b(comprar|adquirir|tomar|quiero|necesito)\s+(el\s+)?(producto\s+[abc])\b",
        r"\b(me\s+)?(interesa|gusta)\s+(el\s+)?(producto\s+[abc])\b",
        r"\b(producto\s+[abc])\s+(por\s+favor|please)\b",
        r"\b(quiero|necesito)\s+(el\s+)?(producto\s+[abc])\b"
    ],
    "support": [
        r"\b(ayuda|soporte|problema|consulta|asistencia)\b",
        r"\b(necesito|quiero|busco)\s+(ayuda|soporte|asistencia)\b",
        r"\b(tengo\s+un\s+)?(problema|duda|pregunta)\b"
    ],
    "returns": [
        r"\b(devoluci√≥n|devolucion|reembolso|devolver|return)\b",
        r"\b(pol√≠tica|politica)\s+(de\s+)?(devoluci√≥n|devolucion)\b",
        r"\b(c√≥mo|como)\s+(devolver|reembolsar)\b"
    ],
    "warranty": [
        r"\b(garant√≠a|garantia|warranty|garantizado|garantizada)\b",
        r"\b(tiene\s+)?(garant√≠a|garantia)\b",
        r"\b(cu√°nto|cuanto)\s+(dura|tiene)\s+(la\s+)?(garant√≠a|garantia)\b"
    ],
    "shipping": [
        r"\b(env√≠o|envio|entrega|shipping|delivery)\b",
        r"\b(cu√°nto|cuanto)\s+(tarda|dura)\s+(el\s+)?(env√≠o|envio)\b",
        r"\b(c√≥mo|como)\s+(se\s+)?(env√≠a|envia|entrega)\b"
    ],
    "pricing": [
        r"\b(precio|costos?|costo|valor|cu√°nto|cuanto)\b",
        r"\b(qu√©|que)\s+(cuesta|vale)\b",
        r"\b(precios?|tarifas?)\b"
    ]
}

def similarity(a, b):
    """Calcular similitud entre dos strings"""
    return SequenceMatcher(None, a.lower(), b.lower()).ratio()

def find_best_match(message, patterns):
    """Encontrar el mejor patr√≥n que coincida con el mensaje"""
    best_match = None
    best_score = 0
    
    for pattern in patterns:
        matches = re.findall(pattern, message.lower())
        if matches:
            score = len(matches) * 0.5 + len(message) * 0.1
            if score > best_score:
                best_score = score
                best_match = pattern
    
    return best_match, best_score

def extract_product_name(message):
    """Extraer el nombre del producto del mensaje"""
    message_lower = message.lower()
    
    # Buscar patrones espec√≠ficos de productos
    product_patterns = [
        r"producto\s+([abc])",
        r"producto\s+([abc])\b",
        r"el\s+producto\s+([abc])",
        r"producto\s+([abc])\s+por\s+favor",
        r"del\s+producto\s+([abc])",
        r"sobre\s+el\s+producto\s+([abc])",
        r"informaci√≥n\s+del\s+producto\s+([abc])",
        r"info\s+del\s+producto\s+([abc])"
    ]
    
    for pattern in product_patterns:
        match = re.search(pattern, message_lower)
        if match:
            product_letter = match.group(1).upper()
            if product_letter == 'A':
                return PRODUCTS[0]
            elif product_letter == 'B':
                return PRODUCTS[1]
            elif product_letter == 'C':
                return PRODUCTS[2]
    
    return None

def understand_intent(message):
    """Entender la intenci√≥n del mensaje de forma inteligente"""
    message_lower = message.lower()
    
    # Calcular scores para cada intenci√≥n
    intent_scores = {}
    
    for intent, patterns in INTENT_PATTERNS.items():
        score = 0
        for pattern in patterns:
            matches = re.findall(pattern, message_lower)
            if matches:
                score += len(matches) * 2
                # Bonus por coincidencia exacta
                if any(match in message_lower for match in matches):
                    score += 1
        
        # Bonus por palabras clave espec√≠ficas
        if intent == "greeting" and any(word in message_lower for word in ["hola", "buenos", "saludos"]):
            score += 3
        elif intent == "appointment" and any(word in message_lower for word in ["cita", "agendar", "consulta"]):
            score += 3
        elif intent == "products" and any(word in message_lower for word in ["producto", "cat√°logo", "catalogo"]):
            score += 3
        elif intent == "product_info" and extract_product_name(message):
            score += 6  # Prioridad alta para informaci√≥n espec√≠fica de productos
        elif intent == "purchase" and extract_product_name(message):
            score += 5
        elif intent == "support" and any(word in message_lower for word in ["ayuda", "soporte", "problema"]):
            score += 3
        elif intent == "returns" and any(word in message_lower for word in ["devoluci√≥n", "reembolso"]):
            score += 3
        elif intent == "warranty" and any(word in message_lower for word in ["garant√≠a", "garantia"]):
            score += 3
        elif intent == "shipping" and any(word in message_lower for word in ["env√≠o", "envio", "entrega"]):
            score += 3
        
        intent_scores[intent] = score
    
    # Encontrar la intenci√≥n con mayor score
    best_intent = max(intent_scores.items(), key=lambda x: x[1])
    
    # Si no hay una intenci√≥n clara, usar "general"
    if best_intent[1] < 1:
        return "general"
    
    return best_intent[0]

@app.route('/')
def home():
    return jsonify({"message": "Chatbot Inteligente API funcionando!", "status": "ok"})

@app.route('/health')
def health():
    return jsonify({"status": "healthy", "service": "smart-chatbot-api"})

@app.route('/chat/send', methods=['POST'])
def chat_send():
    try:
        data = request.get_json()
        message = data.get('message', '').lower()
        user_id = data.get('user_id', 'unknown')
        
        print(f"Recibido mensaje: {message} de usuario: {user_id}")
        
        # Entender la intenci√≥n del mensaje
        intent = understand_intent(message)
        print(f"Intenci√≥n detectada: {intent}")
        
        # Generar respuesta basada en la intenci√≥n
        if intent == "greeting":
            response = {
                "message": "¬°Hola! Soy tu asistente virtual inteligente. Puedo ayudarte con:\n‚Ä¢ üìÖ Agendar citas\n‚Ä¢ üõçÔ∏è Informaci√≥n de productos\n‚Ä¢ üí≥ Procesar compras\n‚Ä¢ üÜò Atenci√≥n al cliente\n‚Ä¢ üì¶ Informaci√≥n de env√≠os\n‚Ä¢ üîÑ Pol√≠ticas de devoluci√≥n\n\n¬øEn qu√© te puedo ayudar?",
                "intent": "greeting",
                "metadata": {
                    "action": "show_options"
                }
            }
        
        elif intent == "appointment":
            response = {
                "message": "Perfecto, te ayudo a agendar una cita. Tenemos estos servicios disponibles:",
                "intent": "appointment",
                "metadata": {
                    "action": "show_services",
                    "services": SERVICES
                }
            }
        
        elif intent == "products":
            response = {
                "message": "Te muestro nuestro cat√°logo de productos disponibles:",
                "intent": "sales",
                "metadata": {
                    "action": "show_products",
                    "products": PRODUCTS
                }
            }
        
        elif intent == "product_info":
            selected_product = extract_product_name(message)
            if selected_product:
                response = {
                    "message": f"¬°Por supuesto! Te cuento sobre {selected_product['name']}:\n\nüì¶ **Descripci√≥n:** {selected_product['description']}\nüí∞ **Precio:** ${selected_product['price']}\nüîí **Garant√≠a:** 1 a√±o\nüì¶ **Env√≠o:** Gratis en compras superiores a $50\n\n¬øTe gustar√≠a:\n‚Ä¢ üí≥ Comprar este producto\n‚Ä¢ üì¶ Ver informaci√≥n de env√≠o\n‚Ä¢ üîí Saber m√°s sobre la garant√≠a\n‚Ä¢ üõçÔ∏è Ver otros productos",
                    "intent": "product_info",
                    "metadata": {
                        "action": "show_product_details",
                        "selected_product": selected_product
                    }
                }
            else:
                response = {
                    "message": "Te muestro nuestros productos disponibles para que puedas elegir cu√°l te interesa:",
                    "intent": "sales",
                    "metadata": {
                        "action": "show_products",
                        "products": PRODUCTS
                    }
                }
        
        elif intent == "purchase":
            selected_product = extract_product_name(message)
            if selected_product:
                response = {
                    "message": f"¬°Excelente elecci√≥n! Has seleccionado {selected_product['name']} por ${selected_product['price']}.\n\n¬øTe gustar√≠a proceder con la compra? Puedo ayudarte con:\n‚Ä¢ üí≥ Procesar el pago\n‚Ä¢ üì¶ Informaci√≥n de env√≠o\n‚Ä¢ üîí Garant√≠a del producto\n‚Ä¢ üìû Contactar un agente",
                    "intent": "purchase",
                    "metadata": {
                        "action": "show_purchase_options",
                        "selected_product": selected_product
                    }
                }
            else:
                response = {
                    "message": "Te muestro nuestros productos disponibles para que puedas elegir:",
                    "intent": "sales",
                    "metadata": {
                        "action": "show_products",
                        "products": PRODUCTS
                    }
                }
        
        elif intent == "support":
            response = {
                "message": "Te ayudo con tu consulta. Puedo asistirte con:\n‚Ä¢ üîÑ Pol√≠ticas de devoluci√≥n\n‚Ä¢ üîí Garant√≠as\n‚Ä¢ üì¶ Env√≠os y entregas\n‚Ä¢ üìÖ Agendar citas\n‚Ä¢ üõçÔ∏è Informaci√≥n de productos\n‚Ä¢ üí≥ Procesar compras\n\n¬øEn qu√© puedo ayudarte espec√≠ficamente?",
                "intent": "support",
                "metadata": {
                    "action": "show_support_options"
                }
            }
        
        elif intent == "returns":
            response = {
                "message": "Nuestra pol√≠tica de devoluciones permite reembolsos dentro de los 30 d√≠as de la compra. Los productos deben estar en su empaque original y sin usar.\n\n¬øTe gustar√≠a saber m√°s detalles sobre el proceso de devoluci√≥n?",
                "intent": "support",
                "metadata": {
                    "action": "show_support_options"
                }
            }
        
        elif intent == "warranty":
            response = {
                "message": "Todos nuestros productos tienen garant√≠a de 1 a√±o. La garant√≠a cubre defectos de fabricaci√≥n y funcionamiento normal.\n\n¬øNecesitas informaci√≥n espec√≠fica sobre la garant√≠a de alg√∫n producto?",
                "intent": "support",
                "metadata": {
                    "action": "show_support_options"
                }
            }
        
        elif intent == "shipping":
            response = {
                "message": "Los env√≠os se realizan en 2-3 d√≠as h√°biles. Ofrecemos env√≠o gratuito en compras superiores a $50.\n\n¬øTe gustar√≠a ver nuestros productos disponibles?",
                "intent": "sales",
                "metadata": {
                    "action": "show_products",
                    "products": PRODUCTS
                }
            }
        
        elif intent == "pricing":
            response = {
                "message": "Nuestros precios son muy competitivos. Te muestro nuestros productos con sus precios:",
                "intent": "sales",
                "metadata": {
                    "action": "show_products",
                    "products": PRODUCTS
                }
            }
        
        else:  # intent == "general"
            response = {
                "message": "Entiendo tu consulta. Como asistente virtual inteligente, puedo ayudarte con:\n‚Ä¢ üìÖ Agendar citas\n‚Ä¢ üõçÔ∏è Informaci√≥n de productos\n‚Ä¢ üí≥ Procesar compras\n‚Ä¢ üîÑ Pol√≠ticas de devoluci√≥n\n‚Ä¢ üîí Garant√≠as\n‚Ä¢ üì¶ Env√≠os\n\n¬øEn qu√© te puedo asistir espec√≠ficamente?",
                "intent": "general",
                "metadata": {
                    "action": "show_options"
                }
            }
        
        print(f"Respuesta: {response}")
        return jsonify(response)
        
    except Exception as e:
        print(f"Error en chat_send: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/appointments/available-slots')
def available_slots():
    slots = []
    for hour in range(9, 18):
        slots.append(f"{hour:02d}:00")
        slots.append(f"{hour:02d}:30")
    
    return jsonify({
        "available_slots": slots,
        "services": SERVICES
    })

@app.route('/sales/products')
def get_products():
    return jsonify({"products": PRODUCTS})

@app.route('/support/query', methods=['POST'])
def support_query():
    data = request.get_json()
    query = data.get('query', '').lower()
    
    if any(word in query for word in ["devoluci√≥n", "reembolso"]):
        response = "Nuestra pol√≠tica de devoluciones permite reembolsos dentro de los 30 d√≠as de la compra."
    elif any(word in query for word in ["garant√≠a", "garantia"]):
        response = "Todos nuestros productos tienen garant√≠a de 1 a√±o."
    elif any(word in query for word in ["env√≠o", "envio", "entrega"]):
        response = "Los env√≠os se realizan en 2-3 d√≠as h√°biles."
    else:
        response = "Gracias por tu consulta. Un agente te contactar√° pronto."
    
    return jsonify({
        "response": response,
        "escalated": False,
        "ticket_id": f"TKT-{len(query)}"
    })

if __name__ == '__main__':
    print("üöÄ Iniciando Chatbot Inteligente...")
    print("üì° Servidor disponible en: http://localhost:8000")
    print("üìö Endpoints disponibles:")
    print("   - GET  /health")
    print("   - POST /chat/send")
    print("   - GET  /appointments/available-slots")
    print("   - GET  /sales/products")
    print("   - POST /support/query")
    print("üß† Caracter√≠sticas inteligentes:")
    print("   - Procesamiento de lenguaje natural")
    print("   - Detecci√≥n avanzada de intenciones")
    print("   - Comprensi√≥n de frases complejas")
    print("   - Extracci√≥n inteligente de productos")
    
    # Iniciar servidor en modo debug
    app.run(host='0.0.0.0', port=8000, debug=True, threaded=True) 